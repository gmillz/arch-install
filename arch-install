#!/bin/bash

base_packages=("base" "linux" "linux-firmware" "nano" "sudo")

check_internet() {
    wget -q --tries=10 --timeout=20 --spider https://google.com
    if [[ $? -eq 0 ]]; then
        return 0
    else
        return 1
    fi
}

# Sync pacman
pacman -Sy

# partition the disks
clear
i=1
IFS=$'\n'
for d in $(lsblk | grep disk); do
    names=(${names[@]} "$i $d")
    array[$i]=$d
    i=$(($i + 1))
done

echo "${names[@]/%/$'\n'}"
read -p "Enter selection: " disk_id
disk=$(echo ${array[$disk_id]} | cut -d' ' -f1)

# create partition table
parted /dev/$disk mktable gpt
# make efi partition
parted /dev/$disk mkpart primary fat32 1MiB 500MiB
parted /dev/$disk set 1 esp on
mkfs.fat -F32 /dev/"$disk"1
efi_part=/dev/"$disk"1

# make swap partition
parted /dev/$disk mkpart primary linux-swap 501MiB 2500MiB
mkswap /dev/"$disk"2
swapon /dev/"$disk"2

# make main partition
parted /dev/$disk mkpart primary ext4 2501MiB 100%
mkfs.ext4 /dev/"$disk"3

mount /dev/"$disk"3 /mnt

# Install base packages
pacstrap /mnt ${base_packages[@]}

# Generate fstab
genfstab -U /mnt >> /mnt/etc/fstab

# Configure system

# Configure sudo for wheel group
sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/g' /mnt/etc/sudoers

# Set timezone
arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime
arch-chroot /mnt hwclock --systohc

# Set locale
clear
echo ""
echo "To list all locales enter \"list\""
read -p "Enter locale: Default [en_US.UTF-8 UTF-8] " locale
if [ -z "$locale" ]; then
    locale="en_US.UTF-8 UTF-8"
fi
if [ "$locale" == "list" ]; then
    i=1
    IFS=$'\n'
    for loc in $(cat /usr/share/i18n/SUPPORTED); do
        names=(${names[@]} "$i $loc")
        array[$i]="$loc"
        i=$(($i + 1))
    done
    echo "${names[@]/%/$'\n'}" | column
    read -p "Enter selection: " locale_id
    locale="${array[$locale_id]}"
fi
echo "Selected locale: $locale"
echo $locale >> /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo LANG=$(echo $locale | cut -d' ' -f1) > /mnt/etc/locale.conf

# Set hostname
clear
read -p "Enter hostname: " hostname
echo ""
echo $hostname > /mnt/etc/hostname

# Set root password
clear
echo "Set root password."
arch-chroot /mnt passwd
while [ "$?" == "10" ]; do
    clear
    echo "Setting root password failed. Please try again."
    arch-chroot /mnt passwd
done

# Setup user
clear
echo "Setup user."
read -p "Enter username: " username
echo ""
arch-chroot /mnt useradd -m $username
arch-chroot /mnt usermod -aG wheel,audio,video,optical,storage $username
arch-chroot /mnt passwd $username
while [ "$?" == "10" ]; do
    clear
    echo "Setting password for $username failed. Please try again."
    arch-chroot /mnt passwd $username
done

# update packages
clear
arch-chroot /mnt pacman -Syu --noconfirm

# bootloader
clear
echo "Install bootloader"
arch-chroot /mnt pacman -S --noconfirm grub efibootmgr dosfstools os-prober mtools

# mount efi partition
mkdir -p /mnt/boot/EFI
mount $efi_part /mnt/boot/EFI

# install grub
arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=GRUB
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# install networkmanager
arch-chroot /mnt pacman -S --noconfirm networkmanager
arch-chroot /mnt systemctl enable NetworkManager

# Install graphics driver
clear
echo "Install video driver."
packages=$(pacman -Ssq xf86-video)
i=1
IFS=$'\n'
for v in ${packages[@]}; do
    names=(${names[@]} "$i $v")
    array[$i]=$v
    i=$(($i + 1))
done
echo "${names[@]/%/$'\n'}" | column
read -p "Enter selection: " video_driver
arch-chroot /mnt pacman -S --noconfirm ${array[$video_driver]}

# Install X
arch-chroot /mnt pacman -S --noconfirm xorg xorg-xinit xterm

# Install lightdm
arch-chroot /mnt pacman -S --noconfirm lightdm lightdm-gtk-greeter
arch-chroot /mnt systemctl enable lightdm

arch-chroot /mnt pacman -S --noconfirm qtile dmenu

# Install xfce4-terminal
arch-chroot /mnt pacman -S --noconfirm xfce4-terminal

# Install base-devel
arch-chroot /mnt pacman -S --noconfirm base-devel git 

# Install arch-repo (gmillz)
echo "" >> /mnt/etc/pacman.conf
echo "[arch-repo]" >> /mnt/etc/pacman.conf
echo "SigLevel = Optional DatabaseOptional" >> /mnt/etc/pacman.conf
echo "Server = https://gitlab.com/gmillz/\$repo/-/raw/master/\$arch" >> /mnt/etc/pacman.conf

# Install paru
arch-chroot /mnt pacman -Sy
arch-chroot /mnt pacman -S --noconfirm paru

# YADM config
clear
read -p "Do you have an existing yadm config you would like to enable now? (y/N) " yadm_config
if [ "$yadm_config" == "Y" ] || [ "$yadm_config" == "y" ]; then
    arch-chroot /mnt pacman -S --noconfirm yadm
    clear
    read -p "Enter git url to your yadm repo: " yadm_repo
    mv /mnt/home/$username/.bashrc /mnt/home/$username/.bashrc-backup
    arch-chroot /mnt su $username -c "yadm clone --bootstrap $yadm_repo"
    if [ ! -f "/mnt/home/$username/.bashrc" ]; then
        mv /mnt/home/$username/.bashrc-backup /mnt/home/$username/.bashrc
    fi
fi

# extra-packages
install_extra_packages() {
    packages=($(grep "^[^#;]" $1))
    arch-chroot /mnt su $username -c "paru --skipreview --sudoflags \"-S\" -S --noconfirm $(grep "^[^#;]" $1 | tr "\n" " ")"
}
clear
if [ -f "packages.txt" ]; then
    echo "Installing extra packages defined by user"
    install_extra_packages packages.txt
# check arch-install config dir in case of packages.txt in yadm repo
elif [ -f "/mnt/home/$username/.config/arch-install/packages.txt" ]; then
    install_extra_packages /mnt/home/$username/.config/arch-install/packages.txt
else
    read -p "Do you want to install additional packages from url containing packages.txt? (y/N) " answer
    if [ "$answer" == "Y" ] || [ "$answer" == "y" ]; then
        clear
        read -p "Enter url to packages.txt file: " packages_url
        curl -s $packages_url -o packages.txt
        install_extra_packages packages.txt
    fi
fi

#unmount
umount -l /mnt